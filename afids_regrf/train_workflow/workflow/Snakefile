# ---- begin snakebids boilerplate ----------------------------------------------

from pathlib import Path

from snakebids import bids, generate_inputs, get_wildcard_constraints


configfile: workflow.source_path("../config/snakebids.yml")


# Get input wildcards
inputs_raw = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
)
inputs_afids = generate_inputs(
    bids_dir=config["afids_dir"],
    pybids_inputs=config["pybids_inputs_afids"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
)


# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------


rule extract_afid:
    input:
        fcsv=inputs_afids["afids"].path,
    output:
        txt=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="afid-{afid}.txt",
            **inputs_raw["T1w"].wildcards
        ),
    log:
        bids(
            root="logs",
            suffix="landmark.log",
            afid="{afid}",
            **inputs_raw["T1w"].wildcards
        ),
    script:
        './scripts/extract_afids.py"'


rule train_model:
    input:
        images=inputs_raw["T1w"].expand(),
        fcsvs=inputs_afids["afids"].expand(),
        feature_offsets=Path(workflow.basedir).parent.parent
        / "resources"
        / "feature_offsets.npz",
    output:
        models=bids(
                root=str(Path(config["output_dir"]) / "afids-cnn-train" / "padding{padding}size{size}samplingrate{sampling_rate}"),
                suffix=(
                    "afid-{afid}_desc-rf_sampleRate-iso{sampling_rate}vox_model.joblib",
                ),
            ),
    params:
        num_channels=config["num_channels"],
    shell:
        "afids_regrf_train --subject_paths {input.images} --fcsv_paths {input.fcsvs} "
        "--feature_offsets_path {input.feature_offsets} --model_dir_path {output.model} "
        "--padding {wildcards.padding} --size {wildcards.size} "
        "--sampling_rate {wildcards.sampling_rate} --afid_label {wildcards.afid}"


rule all:
    input:
        models=expand(
            rules.train_model.output.model,
            afid=[f"{afid:02}" for afid in range(1, 33)],
            num_augment=config["num_augment"],
            angle_stdev=config["angle_stdev"],
            radius=config["radius"],
            frequency=config["frequency"],
        ),
    output:
        combined_model=bids(
            root=str(Path(config["output_dir"]) / "afids-cnn-model"),
            suffix="model-combined.afidsmodel",
        ),
    params:
        radius=config["radius"],
    resources:
        script=str(Path(workflow.basedir) / "scripts" / "assemble_models.py"),
    default_target: True
    shell:
        "python3 {resources.script} {input.models} {params.radius} "
        "{output.combined_model}"
